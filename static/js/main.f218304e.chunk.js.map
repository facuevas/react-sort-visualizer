{"version":3,"sources":["components/Layout/BottomInput.js","utility/utility.js","utility/algorithms/bubbleSort.js","utility/algorithms/insertionSort.js","utility/algorithms/selectionSort.js","utility/algorithms/mergeSort.js","components/SortVisualizer/SortVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["ButtomInput","handleCreateNewArray","handleCreateNewArrayWithLength","style","marginTop","color","outline","onClick","className","generateNewArray","length","min","max","newArray","i","push","Math","floor","random","sleep","milliseconds","Promise","resolve","setTimeout","bubbleSort","chartReference","a","chart","current","data","datasets","colors","backgroundColor","console","log","checkSwap","j","update","temp","insertionSort","insertionValue","selectionSort","sortedData","slice","sort","b","originalColor","mergeSort","doMergeSort","lo","hi","mid","merge","k","options","legend","display","scales","yAxes","xAxes","plugins","tooltips","enabled","events","animation","duration","SortVisualizer","useState","setLength","array","setArray","useRef","labels","label","borderColor","borderWidth","ref","redraw","BottomInput","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA0CeA,EAvCK,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,qBAAsBC,EAAqC,EAArCA,+BAC3C,OACE,cAAC,IAAD,CAAWC,MAAO,CAAEC,UAAW,QAA/B,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQC,MAAM,UAAUC,SAAO,EAACC,QAAS,kBAAMN,KAA/C,kCAIF,eAAC,IAAD,CAAKO,UAAU,gCAAf,UACE,cAAC,IAAD,CAAQH,MAAM,UAAUC,SAAO,EAACC,QAAS,kBAAML,EAA+B,KAA9E,gBAGA,cAAC,IAAD,CAAQG,MAAM,UAAUC,SAAO,EAACC,QAAS,kBAAML,EAA+B,KAA9E,gBAGA,cAAC,IAAD,CAAQG,MAAM,UAAUC,SAAO,EAACC,QAAS,kBAAML,EAA+B,KAA9E,gBAGA,cAAC,IAAD,CAAQG,MAAM,UAAUC,SAAO,EAACC,QAAS,kBAAML,EAA+B,MAA9E,iBAGA,cAAC,IAAD,CAAQG,MAAM,UAAUC,SAAO,EAACC,QAAS,kBAAML,EAA+B,MAA9E,iBAGA,cAAC,IAAD,CAAQG,MAAM,UAAUC,SAAO,EAACC,QAAS,kBAAML,EAA+B,MAA9E,oBAIF,cAAC,IAAD,CAAKM,UAAU,6BAAf,SACE,cAAC,IAAD,CAAQH,MAAM,UAAUC,SAAO,EAA/B,wCC5BGG,EAAmB,SAACC,GAK/B,IAHA,IANoCC,EAAKC,EAMnCC,EAAW,GAGRC,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BD,EAASE,MAVyBJ,EAUE,GAVGC,EAUC,IATnCI,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,KAWpD,OAAOE,GAGIM,EAAQ,SAACC,GACpB,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,O,uBCfzCI,EAAU,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,sDACpBC,EAAQF,EAAeG,QAGrBC,EAAOF,EAAME,KAAKC,SAAS,GAAGD,KAE9BE,EAASJ,EAAME,KAAKC,SAAS,GAAGE,gBAItCC,QAAQC,IAAIH,GAEHjB,EAAI,EAZW,YAYRA,EAAIe,EAAKnB,OAAS,GAZV,iBAalByB,GAAY,EACPC,EAAI,EAdS,YAcNA,EAAIP,EAAKnB,OAAS,GAdZ,wBAoBpBiB,EAAMU,SApBc,UAqBdlB,EAAM,KArBQ,QAuBhBU,EAAKO,GAAKP,EAAKO,EAAI,KAEjBE,EAAOT,EAAKO,GAChBP,EAAKO,GAAKP,EAAKO,EAAI,GACnBP,EAAKO,EAAI,GAAKE,EAEdH,GAAY,GA7BM,QAceC,IAdf,2BAmCJ,IAAdD,EAnCkB,qDAwCtBR,EAAMU,SAxCgB,QAYavB,IAZb,2DAAH,sDCAVyB,EAAa,uCAAG,WAAOd,GAAP,uBAAAC,EAAA,sDACvBC,EAAQF,EAAeG,QACrBC,EAAOF,EAAME,KAAKC,SAAS,GAAGD,KAE3Bf,EAAI,EAJc,YAIXA,EAAIe,EAAKnB,QAJE,iBAKrB8B,EAAiBX,EAAKf,GACtBsB,EAAItB,EANiB,YAOlBsB,EAAI,GAAKP,EAAKO,EAAI,GAAKI,GAPL,wBAQvBX,EAAKO,GAAKP,EAAKO,EAAI,GACnBA,IACAT,EAAMU,SAViB,UAWjBlB,EAAM,KAXW,+BAcrBiB,IAAMtB,IACRe,EAAKO,GAAKI,GAEZb,EAAMU,SAjBmB,QAIMvB,IAJN,2DAAH,sDCAb2B,EAAa,uCAAG,WAAOhB,GAAP,+BAAAC,EAAA,sDACvBC,EAAQF,EAAeG,QACrBC,EAAOF,EAAME,KAAKC,SAAS,GAAGD,KAC9Ba,EAAab,EAAKc,QAAQC,MAAK,SAAClB,EAAGmB,GAAJ,OAAUnB,EAAImB,KAC7Cd,EAASJ,EAAME,KAAKC,SAAS,GAAGE,gBAChCc,EAAgB,0BACtBb,QAAQC,IAAIQ,GAEH5B,EAAI,EARc,YAQXA,EAAIe,EAAKnB,OAAS,GARP,wBAWzBqB,EAFIpB,EAAMG,GAEI,SACda,EAAME,KAAKC,SAAS,GAAGE,gBAAkBD,EACzCJ,EAAMU,SAbmB,UAcnBlB,EAAM,KAda,QAgBhBiB,EAAItB,EAAI,EAhBQ,aAgBLsB,EAAIP,EAAKnB,QAhBJ,wBAkBvBqB,EAAOK,GAAK,OACZT,EAAME,KAAKC,SAAS,GAAGE,gBAAkBD,EACzCJ,EAAMU,SApBiB,UAqBjBlB,EAAM,KArBW,aAwBnBU,EAAKO,GAAKP,EAAKlB,IAxBI,wBAyBrBoB,EAAOpB,GAAOmC,EAEdf,EADApB,EAAMyB,GACQ,SACdT,EAAME,KAAKC,SAAS,GAAGE,gBAAkBD,EACzCJ,EAAMU,SA7Be,UA8BflB,EAAM,KA9BS,uCAgCrBY,EAAOK,GAAKU,EACZnB,EAAME,KAAKC,SAAS,GAAGE,gBAAkBD,EACzCJ,EAAMU,SAlCe,UAmCflB,EAAM,KAnCS,QAgBYiB,IAhBZ,wBAuCrBzB,IAAQG,IACNwB,EAAOT,EAAKlB,GAChBkB,EAAKlB,GAAOkB,EAAKf,GACjBe,EAAKf,GAAKwB,EACVP,EAAOjB,GAAK,QACZa,EAAME,KAAKC,SAAS,GAAGE,gBAAkBD,GAG3CJ,EAAMU,SA/CmB,QAQUvB,IARV,2DAAH,sDCAbiC,EAAS,uCAAG,WAAOtB,GAAP,iBAAAC,EAAA,sDACnBC,EAAQF,EAAeG,QACrBC,EAAOF,EAAME,KAAKC,SAAS,GAAGD,KACpCmB,EAAYnB,EAAM,EAAGA,EAAKnB,OAAS,EAAGiB,GACtCM,QAAQC,IAAIL,GAJW,2CAAH,sDAOhBmB,EAAW,uCAAG,WAAOnB,EAAMoB,EAAIC,EAAIvB,GAArB,eAAAD,EAAA,sDACdwB,EAAKD,EAAK,IAEZD,EAAYnB,EAAMoB,EADZE,EAAMF,GAAOC,EAAKD,GAAO,GACJtB,GAC3BqB,EAAYnB,EAAMsB,EAAKD,EAAIvB,GAC3ByB,EAAMvB,EAAMoB,EAAIE,EAAKD,EAAIvB,IALT,2CAAH,4DASXyB,EAAK,uCAAG,WAAOvB,EAAMoB,EAAIE,EAAKD,EAAIvB,GAA1B,uBAAAD,EAAA,sDACNY,EAAO,GACP5B,EAASyC,EAAMF,EAIhBnC,EAAI,EANG,YAMAA,EAAIJ,GANJ,wBAQV4B,EAAKxB,GAAKe,EAAKoB,EAAKnC,GACpBa,EAAMU,SATI,SAUJlB,EAAM,KAVF,OAMYL,IANZ,uBAcZA,EAAI,EACJsB,EAAIe,EACJE,EAAIJ,EAhBQ,aAkBLnC,EAAIJ,GAAU0B,EAAIc,GAlBb,sBAmBNZ,EAAKxB,IAAMe,EAAKO,IAnBV,wBAqBRP,EAAKwB,KAAOf,EAAKxB,KACjBa,EAAMU,SAtBE,UAuBFlB,EAAM,KAvBJ,uCA0BRU,EAAKwB,KAAOxB,EAAKO,KACjBT,EAAMU,SA3BE,UA4BFlB,EAAM,KA5BJ,qCAiCLL,EAAIJ,GAjCC,wBAmCVmB,EAAKwB,KAAOf,EAAKxB,KACjBa,EAAMU,SApCI,UAqCJlB,EAAM,KArCF,oEAAH,8DCqELmC,EAAU,CACdC,OAAQ,CACNC,SAAS,GAGXC,OAAQ,CACNC,MAAO,CACLF,SAAS,GAEXG,MAAO,CACLH,SAAS,IAIbI,QAAS,CACPL,OAAQ,CACNC,SAAS,IAIbK,SAAU,CACRC,SAAS,GAGXC,OAAQ,GAGRC,UAAW,CACTC,SAAU,GACVN,OAAO,EACPD,OAAO,IAIIQ,EA/GQ,WAErB,MAA4BC,mBAAS,KAArC,mBAAOzD,EAAP,KAAe0D,EAAf,KACA,EAA0BD,mBAAS1D,EAAiBC,IAApD,mBAAO2D,EAAP,KAAcC,EAAd,KAGM7C,EAAiB8C,iBAAO,MAGxB1C,EAAO,CACX2C,OAAQH,EACRvC,SAAU,CACR,CACE2C,MAAO,cACP5C,KAAMwC,EACNrC,gBAAiB,CAAC,2BAClB0C,YAAa,CAAC,yBACdC,YAAa,KAgBnB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK9C,KAAMA,EAAMyB,QAASA,EAASsB,IAAKnD,EAAgBoD,QAAM,IAC9D,cAACC,EAAD,CACE7E,qBAduB,WAC3BqE,EAAS7D,EAAiBC,KActBR,+BAViC,SAACQ,GACtC0D,EAAU1D,GACV4D,EAAS7D,EAAiBC,OAUxB,cAAC,IAAD,CACEL,MAAM,UACNC,SAAO,EACPH,MAAO,CAAEC,UAAW,QACpBG,QAAS,kBAAMiB,EAAWC,IAJ5B,yBAQA,cAAC,IAAD,CACEpB,MAAM,UACNC,SAAO,EACPH,MAAO,CAAEC,UAAW,QACpBG,QAAS,kBAAMgC,EAAcd,IAJ/B,4BAQA,cAAC,IAAD,CACEpB,MAAM,UACNC,SAAO,EACPH,MAAO,CAAEC,UAAW,QACpBG,QAAS,kBAAMkC,EAAchB,IAJ/B,4BAQA,cAAC,IAAD,CACEpB,MAAM,UACNC,SAAO,EACPH,MAAO,CAAEC,UAAW,QACpBG,QAAS,kBAAMwC,EAAUtB,IAJ3B,4BChESsD,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f218304e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Row, Col, Button } from \"reactstrap\";\r\n\r\nconst ButtomInput = ({ handleCreateNewArray, handleCreateNewArrayWithLength }) => {\r\n  return (\r\n    <Container style={{ marginTop: \"1rem\" }}>\r\n      <Row>\r\n        <Col>\r\n          <Button color=\"primary\" outline onClick={() => handleCreateNewArray()}>\r\n            Generate New Array\r\n          </Button>\r\n        </Col>\r\n        <Col className=\"d-flex justify-content-center\">\r\n          <Button color=\"primary\" outline onClick={() => handleCreateNewArrayWithLength(10)}>\r\n            10\r\n          </Button>\r\n          <Button color=\"primary\" outline onClick={() => handleCreateNewArrayWithLength(25)}>\r\n            25\r\n          </Button>\r\n          <Button color=\"primary\" outline onClick={() => handleCreateNewArrayWithLength(50)}>\r\n            50\r\n          </Button>\r\n          <Button color=\"primary\" outline onClick={() => handleCreateNewArrayWithLength(100)}>\r\n            100\r\n          </Button>\r\n          <Button color=\"primary\" outline onClick={() => handleCreateNewArrayWithLength(250)}>\r\n            250\r\n          </Button>\r\n          <Button color=\"primary\" outline onClick={() => handleCreateNewArrayWithLength(500)}>\r\n            500\r\n          </Button>\r\n        </Col>\r\n        <Col className=\"d-flex justify-content-end\">\r\n          <Button color=\"primary\" outline>\r\n            Generate New Array\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ButtomInput;\r\n","// This function generates a random interval between min and max values\r\nexport const randomIntFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport const generateNewArray = (length) => {\r\n  // create a new array\r\n  const newArray = [];\r\n  // push random numbers from 10 - 600.\r\n  // Chart.js will use the number as the height of the bar\r\n  for (let i = 0; i < length; i++) {\r\n    newArray.push(randomIntFromInterval(10, 600));\r\n  }\r\n  return newArray;\r\n};\r\n\r\nexport const sleep = (milliseconds) => {\r\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n};\r\n","import { sleep } from \"../utility\";\r\n\r\nexport const bubbleSort = async (chartReference) => {\r\n  let chart = chartReference.current;\r\n\r\n  // reference our (currently) unsorted  array\r\n  const data = chart.data.datasets[0].data;\r\n  // reference our original colors\r\n  const colors = chart.data.datasets[0].backgroundColor;\r\n  //   // original color of the array bar\r\n  //   const originalColor = \"rgba(255, 99, 132, 0.2)\";\r\n  // meta for our data set\r\n  console.log(colors);\r\n\r\n  for (let i = 0; i < data.length - 1; i++) {\r\n    let checkSwap = false;\r\n    for (let j = 0; j < data.length - 1; j++) {\r\n      // color our current comparison\r\n      // colors[j] = \"blue\";\r\n      // chart.data.datasets[0].backgroundColor = colors;\r\n\r\n      // this updates the current comparison color\r\n      chart.update();\r\n      await sleep(100);\r\n\r\n      if (data[j] > data[j + 1]) {\r\n        // swap values\r\n        let temp = data[j];\r\n        data[j] = data[j + 1];\r\n        data[j + 1] = temp;\r\n\r\n        checkSwap = true;\r\n      }\r\n      // overwrite new colors\r\n      //   colors[j] = originalColor;\r\n      //   chart.data.datasets[0].backgroundColor = colors;\r\n    }\r\n    if (checkSwap === false) {\r\n      break;\r\n    }\r\n    // colors[data.length - i - 1] = \"#7cc746\"; // color last element green\r\n    // chart.data.datasets[0].backgroundColor = colors;\r\n    chart.update();\r\n  }\r\n};\r\n","import { sleep } from \"../utility\";\r\n\r\nexport const insertionSort = async (chartReference) => {\r\n  let chart = chartReference.current;\r\n  const data = chart.data.datasets[0].data;\r\n\r\n  for (let i = 1; i < data.length; i++) {\r\n    let insertionValue = data[i];\r\n    let j = i;\r\n    while (j > 0 && data[j - 1] > insertionValue) {\r\n      data[j] = data[j - 1];\r\n      j--;\r\n      chart.update();\r\n      await sleep(100);\r\n    }\r\n\r\n    if (j !== i) {\r\n      data[j] = insertionValue;\r\n    }\r\n    chart.update();\r\n  }\r\n};\r\n","import { sleep } from \"../utility\";\r\n\r\nexport const selectionSort = async (chartReference) => {\r\n  let chart = chartReference.current;\r\n  const data = chart.data.datasets[0].data;\r\n  const sortedData = data.slice().sort((a, b) => a - b);\r\n  const colors = chart.data.datasets[0].backgroundColor;\r\n  const originalColor = \"rgba(255, 99, 132, 0.2)\";\r\n  console.log(sortedData);\r\n\r\n  for (let i = 0; i < data.length - 1; i++) {\r\n    let min = i;\r\n    // our current min value will be colored yellow\r\n    colors[min] = \"yellow\";\r\n    chart.data.datasets[0].backgroundColor = colors;\r\n    chart.update();\r\n    await sleep(100);\r\n\r\n    for (let j = i + 1; j < data.length; j++) {\r\n      // our comparison values will be blue\r\n      colors[j] = \"blue\";\r\n      chart.data.datasets[0].backgroundColor = colors;\r\n      chart.update();\r\n      await sleep(100);\r\n\r\n      // if there is a new minimum, we will use that to compare\r\n      if (data[j] < data[min]) {\r\n        colors[min] = originalColor;\r\n        min = j;\r\n        colors[min] = \"yellow\";\r\n        chart.data.datasets[0].backgroundColor = colors;\r\n        chart.update();\r\n        await sleep(100);\r\n      } else {\r\n        colors[j] = originalColor;\r\n        chart.data.datasets[0].backgroundColor = colors;\r\n        chart.update();\r\n        await sleep(100);\r\n      }\r\n    }\r\n    // swap our min value with where we currently are\r\n    if (min !== i) {\r\n      let temp = data[min];\r\n      data[min] = data[i];\r\n      data[i] = temp;\r\n      colors[i] = \"green\";\r\n      chart.data.datasets[0].backgroundColor = colors;\r\n    }\r\n\r\n    chart.update();\r\n  }\r\n};\r\n","import { sleep } from \"../utility\";\r\n\r\nexport const mergeSort = async (chartReference) => {\r\n  let chart = chartReference.current;\r\n  const data = chart.data.datasets[0].data;\r\n  doMergeSort(data, 0, data.length - 1, chart);\r\n  console.log(data);\r\n};\r\n\r\nconst doMergeSort = async (data, lo, hi, chart) => {\r\n  if (hi - lo > 1) {\r\n    const mid = lo + ((hi - lo) >> 1);\r\n    doMergeSort(data, lo, mid, chart);\r\n    doMergeSort(data, mid, hi, chart);\r\n    merge(data, lo, mid, hi, chart);\r\n  }\r\n};\r\n\r\nconst merge = async (data, lo, mid, hi, chart) => {\r\n  const temp = [];\r\n  const length = mid - lo;\r\n  let i, j, k;\r\n\r\n  // save left sub-array\r\n  for (i = 0; i < length; i++) {\r\n    // animate here\r\n    temp[i] = data[lo + i];\r\n    chart.update();\r\n    await sleep(100);\r\n  }\r\n\r\n  // merge subarrays\r\n  i = 0;\r\n  j = mid;\r\n  k = lo;\r\n\r\n  while (i < length && j < hi) {\r\n    if (temp[i] <= data[j]) {\r\n      //animate this move\r\n      data[k++] = temp[i++];\r\n      chart.update();\r\n      await sleep(100);\r\n    } else {\r\n      //animate this move\r\n      data[k++] = data[j++];\r\n      chart.update();\r\n      await sleep(100);\r\n    }\r\n  }\r\n\r\n  // copy the remaining elements\r\n  while (i < length) {\r\n    //animate this move\r\n    data[k++] = temp[i++];\r\n    chart.update();\r\n    await sleep(100);\r\n  }\r\n};\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Button, Container } from \"reactstrap\";\r\nimport BottomInput from \"../Layout/BottomInput.js\";\r\nimport { generateNewArray } from \"../../utility/utility\";\r\nimport { bubbleSort } from \"../../utility/algorithms/bubbleSort.js\";\r\nimport { insertionSort } from \"../../utility/algorithms/insertionSort.js\";\r\nimport { selectionSort } from \"../../utility/algorithms/selectionSort.js\";\r\nimport { mergeSort } from \"../../utility/algorithms/mergeSort.js\";\r\n\r\nconst SortVisualizer = () => {\r\n  // states for our array to sort and the length of the array to sort\r\n  const [length, setLength] = useState(100);\r\n  const [array, setArray] = useState(generateNewArray(length));\r\n\r\n  // get the reference for our chart\r\n  const chartReference = useRef(null);\r\n\r\n  // data for our Chart.js\r\n  const data = {\r\n    labels: array,\r\n    datasets: [\r\n      {\r\n        label: \"Bubble Sort\",\r\n        data: array,\r\n        backgroundColor: [\"rgba(255, 99, 132, 0.2)\"],\r\n        borderColor: [\"rgba(255, 99, 132, 1)\"],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // create a new array with the current length\r\n  const handleCreateNewArray = () => {\r\n    setArray(generateNewArray(length));\r\n  };\r\n\r\n  // creates a new array with a new specified length\r\n  const handleCreateNewArrayWithLength = (length) => {\r\n    setLength(length);\r\n    setArray(generateNewArray(length));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Bar data={data} options={options} ref={chartReference} redraw />\r\n      <BottomInput\r\n        handleCreateNewArray={handleCreateNewArray}\r\n        handleCreateNewArrayWithLength={handleCreateNewArrayWithLength}\r\n      />\r\n      <Button\r\n        color=\"success\"\r\n        outline\r\n        style={{ marginTop: \"1rem\" }}\r\n        onClick={() => bubbleSort(chartReference)}\r\n      >\r\n        BUBBLE SORT\r\n      </Button>\r\n      <Button\r\n        color=\"success\"\r\n        outline\r\n        style={{ marginTop: \"1rem\" }}\r\n        onClick={() => insertionSort(chartReference)}\r\n      >\r\n        INSERTION SORT\r\n      </Button>\r\n      <Button\r\n        color=\"success\"\r\n        outline\r\n        style={{ marginTop: \"1rem\" }}\r\n        onClick={() => selectionSort(chartReference)}\r\n      >\r\n        SELECTION SORT\r\n      </Button>\r\n      <Button\r\n        color=\"success\"\r\n        outline\r\n        style={{ marginTop: \"1rem\" }}\r\n        onClick={() => mergeSort(chartReference)}\r\n      >\r\n        MERGE SORT\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// options for our bar graph using Chart.js\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  // these options turn off the scales\r\n  scales: {\r\n    yAxes: {\r\n      display: false,\r\n    },\r\n    xAxes: {\r\n      display: false,\r\n    },\r\n  },\r\n  // this option gets rid off the labels\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n  },\r\n  // disabl tooltips\r\n  tooltips: {\r\n    enabled: false,\r\n  },\r\n  // disables hover mode\r\n  events: [],\r\n  // animation controller for chart.js\r\n  // duration is how long each animation plays out in ms\r\n  animation: {\r\n    duration: 80,\r\n    xAxes: true,\r\n    yAxes: true,\r\n  },\r\n};\r\n\r\nexport default SortVisualizer;\r\n","import SortVisualizer from \"./components/SortVisualizer/SortVisualizer\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <SortVisualizer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}